{"version":3,"sources":["components/Dashboard.js","actions/login.js","actions/types.js","components/Login.js","reducers/loginreducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","this","props","isAuthenticated","className","Employee","map","x","key","id","name","age","gender","email","phoneNo","onClick","logout","to","Component","connect","state","login","dispatch","type","Login","username","password","onSubmit","e","preventDefault","checkUser","onChange","setState","target","value","required","checkPass","LoginData","alert","initialState","combineReducers","action","payload","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbd62854.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Employee from \"../data/employeelist\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { logout } from \"../actions/login\";\r\n\r\nclass Dashboard extends Component {\r\n static propTypes = {\r\n  logout: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool\r\n };\r\n\r\n render() {\r\n  if (!this.props.isAuthenticated) {\r\n   return <Redirect to=\"/\" />;\r\n  }\r\n  return (\r\n   <div>\r\n    <h1 className=\"text-center\">Dashboard Page</h1>\r\n    <h3 className=\"text-center\">Employee List</h3>\r\n    <br />\r\n    <table className=\"table table-striped\">\r\n     <thead>\r\n      <tr>\r\n       <th>ID</th>\r\n       <th>Name</th>\r\n       <th>Age</th>\r\n       <th>Gender</th>\r\n       <th>Email</th>\r\n       <th>PhoneNo</th>\r\n      </tr>\r\n     </thead>\r\n     <tbody>\r\n      {Employee.map(x => (\r\n       <tr key={x.id}>\r\n        <td>{x.id}</td>\r\n        <td>{x.name}</td>\r\n        <td>{x.age}</td>\r\n        <td>{x.gender}</td>\r\n        <td>{x.email}</td>\r\n        <td>{x.phoneNo}</td>\r\n       </tr>\r\n      ))}\r\n     </tbody>\r\n    </table>\r\n    <br />\r\n    <button className=\"btn btn-primary\" onClick={this.props.logout}>\r\n     Logout\r\n        </button>\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n isAuthenticated: state.login.isAuthenticated\r\n});\r\nexport default connect(mapStateToProps, { logout })(Dashboard);\r\n","import { LOGIN_SUCCESS, LOGOUT_SUCCESS } from \"./types\";\r\nimport LoginData from \"../data/login\";\r\n\r\nexport const checkUser = (username, password) => dispatch => {\r\n let checkUser = \"\";\r\n let checkPass = \"\";\r\n\r\n LoginData.map(x => {\r\n  checkUser = x.username;\r\n  checkPass = x.password;\r\n });\r\n\r\n if (checkUser === username && checkPass === password) {\r\n  dispatch({\r\n   type: LOGIN_SUCCESS\r\n  });\r\n } else {\r\n  alert(\"Invalid credentials. Please provide correct details...\");\r\n }\r\n};\r\n\r\nexport const logout = () => dispatch => {\r\n dispatch({\r\n  type: LOGOUT_SUCCESS\r\n });\r\n};\r\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { checkUser } from \"../actions/login\";\r\n\r\nexport class Login extends Component {\r\n      state = {\r\n            username: \"\",\r\n            password: \"\"\r\n      };\r\n\r\n      static propTypes = {\r\n            checkUser: PropTypes.func.isRequired,\r\n            isAuthenticated: PropTypes.bool\r\n      };\r\n\r\n      onSubmit = e => {\r\n            e.preventDefault();\r\n\r\n            this.props.checkUser(this.state.username, this.state.password);\r\n      };\r\n\r\n      onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n      render() {\r\n            if (this.props.isAuthenticated) {\r\n                  return <Redirect to=\"/dashboard\" />;\r\n            }\r\n            const { username, password } = this.state;\r\n            return (\r\n                  <div className=\"col-md-6 m-auto\">\r\n                        <br />\r\n                        <h2 className=\"text-center\">Login Page</h2>\r\n                        <div className=\"card card-body mt-5\">\r\n                              <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                          <label>Username</label>\r\n                                          <input\r\n                                                type=\"text\"\r\n                                                name=\"username\"\r\n                                                className=\"form-control\"\r\n                                                onChange={this.onChange}\r\n                                                value={username}\r\n                                                required\r\n                                          />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                          <label>Password</label>\r\n                                          <input\r\n                                                type=\"password\"\r\n                                                name=\"password\"\r\n                                                className=\"form-control\"\r\n                                                onChange={this.onChange}\r\n                                                value={password}\r\n                                                required\r\n                                          />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                          <button type=\"submit\" className=\"btn btn-primary\">\r\n                                                Login\r\n              </button>\r\n                                    </div>\r\n                              </form>\r\n                        </div>\r\n                  </div>\r\n            );\r\n      }\r\n}\r\nconst mapStateToProps = state => ({\r\n      isAuthenticated: state.login.isAuthenticated\r\n});\r\nexport default connect(mapStateToProps, { checkUser })(Login);\r\n","import { LOGIN_SUCCESS, LOGOUT_SUCCESS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n isAuthenticated: null\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n switch (action.type) {\r\n  case LOGIN_SUCCESS:\r\n   return {\r\n    ...state,\r\n    ...action.payload,\r\n    isAuthenticated: true\r\n   };\r\n  case LOGOUT_SUCCESS:\r\n   return {\r\n    ...state,\r\n    ...action.payload,\r\n    isAuthenticated: false\r\n   };\r\n  default:\r\n   return state;\r\n }\r\n}","import { combineReducers } from \"redux\";\r\nimport login from \"./loginreducer\";\r\n\r\nexport default combineReducers({\r\n login\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n rootReducer,\r\n initialState,\r\n applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;\r\n","import React, { Component, Fragment } from \"react\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Dashboard from \"./components/Dashboard\";\nimport Login from \"./components/Login\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Fragment>\n          <Router>\n            <Switch>\n              <Route exact path=\"/dashboard\" component={Dashboard} />\n              <Route exact path=\"/\" component={Login} />\n            </Switch>\n          </Router>\n        </Fragment>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}